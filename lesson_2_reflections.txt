What happens when you initialize a repository? Why do you need to do it?

	use git init to initialize a repository, then we are on the master branch of on the repository. Git initialize a vide version control library to track all the files in the repository, howerver, because we haven't made any commit yet. All the files in the repository are untracked.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	staging area can save  temporariely the tracked files, if we do a git commit, then all the files in the staging area can get a snapshot and save in the repository.

How can you use the staging area to make sure you have one commit per logical change?

	Add modified file to staging area then use git diff --staged to compare code between staging area and repository, we can use the output to remaind us when to commit accroding to the "one commit per logical change" criteria.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	When we want to try out new features while we don't want to influence the main branch. In that case, branches can help us to have experiments and at the same time keeping our main branch orgnaized.

How do the diagrams help you visualize the branch structure?

	We can use "git log --graph --oneline master branch_name" to visualize the master branch as well as the branch_name branch. The diagram shown in the terminal is a visualized version of git log  that makes it a lot easier for us to know the structure of  a branch or serveal branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	By merging two branches together, we can have the features appear either in one of the two branches work together in the merged branch.